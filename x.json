{
  "name": "bootstrap",
  "description": "Bootstrap nodes for ChiÏ‡",
  "version": "0.0.2",
  "repository": {
    "type": "git",
    "url": "https://github.com/nodule/fs.git"
  },
  "dependencies": {
    "domify": "^1.3.1",
    "mustache": "^1.0.0"
  },
  "nodes": [
    {
      "ports": {
        "input": {
          "template": {
            "title": "Template",
            "type": "string",
            "default": "<div class=\"jumbotron\"><div class=\"container\"><h1>{{title}}</h1><p>{{content}}</p><p><a class=\"btn btn-primary btn-lg\">{{button_text}}</a></p></div></div>",
            "format": "html"
          },
          "vars": {
            "title": "Variables",
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "title": "Title",
                "default": "Hello, world!",
                "required": "true"
              },
              "content": {
                "type": "string",
                "title": "Content",
                "default": "This is a template for a simple marketing or informational website. It includes a large callout called the hero unit and three supporting pieces of content. Use it as a starting point to create something more unique.",
                "required": "true"
              },
              "button_text": {
                "type": "string",
                "title": "Button text",
                "default": "Learn More",
                "required": "true"
              }
            }
          }
        },
        "output": {
          "vars": {
            "title": "Vars",
            "type": "object"
          },
          "template": {
            "title": "Template",
            "type": "string",
            "format": "html"
          }
        }
      },
      "description": "Bootstrap - Jumbotron",
      "title": "Jumbotron",
      "ns": "bootstrap",
      "name": "jumbotron",
      "fn": "output = input;"
    },
    {
      "ports": {
        "input": {
          "element": {
            "type": "HTMLElement",
            "title": "Parent Element",
            "async": true
          },
          "template": {
            "title": "Template",
            "type": "string",
            "default": "<div>{{#label}}<label>{{label}}</label>{{/label}}<select id=\"{{id}}\" class=\"form-control\">{{#options}}<option value=\"{{value}}\">{{label}}</option>{{/options}}</select></div>",
            "format": "html"
          },
          "id": {
            "type": "string",
            "title": "ID",
            "default": ""
          },
          "label": {
            "type": "string",
            "title": "Label",
            "default": ""
          },
          "options": {
            "title": "Variables",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "label": {
                  "type": "string",
                  "title": "Label"
                },
                "value": {
                  "type": "string",
                  "title": "Value"
                },
                "additionalProperties": false
              }
            }
          }
        },
        "output": {
          "element": {
            "title": "Element",
            "type": "HTMLFragment"
          },
          "out": {
            "title": "Value",
            "type": "string"
          }
        }
      },
      "dependencies": {
        "npm": {
          "mustache": "latest",
          "domify": "latest"
        }
      },
      "async": true,
      "description": "Bootstrap - select",
      "title": "Select",
      "ns": "bootstrap",
      "name": "select",
      "fn": "state.select = null;\nstate.changed = function () {\n  output({\n    out: this.value\n  });\n};\n\non.input.element = function () {\n\n  if (state.select) {\n    state.select.removeEventListener('change', state.changed);\n    input.element.innerHTML = null;\n  }\n\n  var view = {\n    id: input.id,\n    label: input.label,\n    options: input.options\n  };\n\n  var el = domify(mustache.render(input.template, view));\n\n  input.element.appendChild(el);\n\n  state.select = input.element.querySelector('select');\n  state.select.addEventListener('change', state.changed);\n\n  output({\n    element: input.element\n  });\n\n};\n"
    }
  ],
  "twigs": []
}