{
  "name": "bootstrap",
  "description": "Bootstrap nodes for ChiÏ‡",
  "version": "0.0.2",
  "repository": {
    "type": "git",
    "url": "https://github.com/nodule/fs.git"
  },
  "dependencies": {
    "domify": "^1.3.1",
    "mustache": "^1.0.0"
  },
  "nodes": [
    {
      "name": "button",
      "ns": "bootstrap",
      "title": "Button",
      "description": "Bootstrap - button",
      "async": true,
      "ports": {
        "input": {
          "element": {
            "title": "Parent Element",
            "type": "HTMLElement",
            "async": true
          },
          "classList": {
            "title": "Class list",
            "type": "string",
            "default": "btn btn-default"
          },
          "in": {
            "type": "any",
            "description": "Input to send to output when clicked",
            "title": "Input",
            "async": true
          },
          "label": {
            "type": "string",
            "title": "Label",
            "default": "Click!"
          },
          "attr": {
            "title": "Attributes",
            "type": "object",
            "default": {}
          }
        },
        "output": {
          "element": {
            "title": "Element",
            "type": "HTMLElement"
          },
          "error": {
            "title": "Error",
            "type": "Error"
          },
          "event": {
            "title": "Event",
            "type": "MouseEvent"
          },
          "out": {
            "title": "Output",
            "type": "any"
          }
        }
      },
      "fn": "state.el = null;\nstate.clickHandler = function(ev) {\n  output({\n    event: ev,\n    out: $.clone('in', state.in)\n  });\n};\n\non.input.element = function() {\n  if (state.el) {\n    state.el.removeEventListener('click', state.clickHandler);\n    state.el.innerHTML = null;\n  }\n  state.el = document.createElement('button');\n  state.el.setAttribute('type', 'button');\n  state.el.innerHTML = $.label;\n  state.el.className = $.classList;\n  Object.keys($.attr).forEach(function(name) {\n    state.el.setAttribute(name, $.attr[name]);\n  });\n  state.el.addEventListener('click', state.clickHandler);\n  $.element.appendChild(state.el);\n  output({\n    element: $.get('element')\n  });\n};\n\non.input.in = function () {\n  state.in = $.in;\n};\n"
    },
    {
      "name": "jumbotron",
      "ns": "bootstrap",
      "title": "Jumbotron",
      "description": "Bootstrap - Jumbotron",
      "ports": {
        "input": {
          "template": {
            "title": "Template",
            "type": "string",
            "default": "<div class=\"jumbotron\"><div class=\"container\"><h1>{{title}}</h1><p>{{content}}</p><p><a class=\"btn btn-primary btn-lg\">{{button_text}}</a></p></div></div>",
            "format": "html"
          },
          "vars": {
            "title": "Variables",
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "title": "Title",
                "default": "Hello, world!",
                "required": "true"
              },
              "content": {
                "type": "string",
                "title": "Content",
                "default": "This is a template for a simple marketing or informational website. It includes a large callout called the hero unit and three supporting pieces of content. Use it as a starting point to create something more unique.",
                "required": "true"
              },
              "button_text": {
                "type": "string",
                "title": "Button text",
                "default": "Learn More",
                "required": "true"
              }
            }
          }
        },
        "output": {
          "vars": {
            "title": "Vars",
            "type": "object"
          },
          "template": {
            "title": "Template",
            "type": "string",
            "format": "html"
          }
        }
      },
      "fn": "output = $.params;\n"
    },
    {
      "name": "select",
      "ns": "bootstrap",
      "title": "Select",
      "description": "Bootstrap - select",
      "async": true,
      "dependencies": {
        "npm": {
          "mustache": "latest",
          "domify": "latest"
        }
      },
      "ports": {
        "input": {
          "element": {
            "type": "HTMLElement",
            "title": "Parent Element",
            "async": true
          },
          "template": {
            "title": "Template",
            "type": "string",
            "default": "<div>{{#label}}<label>{{label}}</label>{{/label}}<select id=\"{{id}}\" class=\"form-control\">{{#options}}<option value=\"{{value}}\">{{label}}</option>{{/options}}</select></div>",
            "format": "html"
          },
          "id": {
            "type": "string",
            "title": "ID",
            "default": ""
          },
          "label": {
            "type": "string",
            "title": "Label",
            "default": ""
          },
          "options": {
            "title": "Variables",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "label": {
                  "type": "string",
                  "title": "Label"
                },
                "value": {
                  "type": "string",
                  "title": "Value"
                },
                "additionalProperties": false
              }
            }
          }
        },
        "output": {
          "element": {
            "title": "Element",
            "type": "HTMLFragment"
          },
          "out": {
            "title": "Value",
            "type": "object",
            "properties": {
              "label": {
                "type": "string",
                "title": "Label"
              },
              "value": {
                "type": "string",
                "title": "Value"
              }
            }
          }
        }
      },
      "fn": "state.select = null;\nstate.view = {};\nstate.changed = function () {\n  var out = {};\n  var self = this;\n\n  out[this.value] = state.view.options.filter(function(opt) {\n    return opt.value === self.value;\n  }).pop();\n\n  output({out: $.create(out)});\n};\n\non.input.element = function () {\n\n  if (state.select) {\n    state.select.removeEventListener('change', state.changed);\n    $.element.innerHTML = null;\n  }\n\n  state.view = {\n    id: $.id,\n    label: $.label,\n    options: $.options\n  };\n\n  var el = domify(mustache.render($.template, state.view));\n\n  $.element.appendChild(el);\n\n  state.select = $.element.querySelector('select');\n  state.select.addEventListener('change', state.changed);\n\n  output({\n    element: $.get('element')\n  });\n\n};\n"
    }
  ]
}